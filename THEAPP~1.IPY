{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d28bab70",
   "metadata": {},
   "outputs": [],
   "source": [
    "import itertools  # Import the itertools module for advanced iteration functions\n",
    "import numpy as np  # Import the NumPy library for numerical operations\n",
    "import scipy.stats as stats  # Import the SciPy statistics module\n",
    "import matplotlib.pyplot as plt  # Import the Matplotlib library for data visualization\n",
    "import sys  # Import the sys module for system-related operations\n",
    "import copy  # Import the copy module for object copying\n",
    "import random  # Import the random module for random number generation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b58b241f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distance between shops\n",
      "[[0.         9.70726643 5.51406828 4.29973452]\n",
      " [9.70726643 0.         5.26560595 3.4658253 ]\n",
      " [5.51406828 5.26560595 0.         1.06576371]\n",
      " [4.29973452 3.4658253  1.06576371 0.        ]]\n"
     ]
    }
   ],
   "source": [
    "# Data: Maximum Retail Prices (MRPs) for different items\n",
    "MRPs = dict()\n",
    "MRPs[0] = 20\n",
    "MRPs[1] = 100\n",
    "MRPs[2] = 50\n",
    "MRPs[3] = 50\n",
    "MRPs[4] = 100\n",
    "MRPs[5] = 60\n",
    "MRPs[6] = 35\n",
    "MRPs[7] = 216\n",
    "MRPs[8] = 27\n",
    "MRPs[9] = 130\n",
    "MRPs[10] = 160\n",
    "MRPs[11] = 89\n",
    "MRPs[12] = 73\n",
    "MRPs[13] = 27\n",
    "MRPs[14] = 185\n",
    "MRPs[15] = 249\n",
    "MRPs[16] = 199\n",
    "MRPs[17] = 46\n",
    "MRPs[18] = 55\n",
    "MRPs[19] = 99\n",
    "\n",
    "'''\n",
    "# Additional items with string keys\n",
    "MRPs['chocolate'] = 20\n",
    "MRPs['chips'] = 50\n",
    "MRPs['pulses'] = 50\n",
    "MRPs['apples'] = 100\n",
    "MRPs['grapes'] = 60\n",
    "MRPs['pepsi'] = 35\n",
    "MRPs['bread'] = 27\n",
    "MRPs['jam'] = 130\n",
    "MRPs['buscuits'] = 160\n",
    "MRPs['butter'] = 89\n",
    "MRPs['toothpaste'] = 73\n",
    "MRPs['eggs'] = 27\n",
    "MRPs['flour'] = 185\n",
    "MRPs['peanut_butter'] = 249\n",
    "MRPs['cheese'] = 199\n",
    "MRPs['milk'] = 46\n",
    "MRPs['yoghurt'] = 55\n",
    "MRPs['muffins'] = 99\n",
    "'''\n",
    "\n",
    "# Number of shops and items\n",
    "no_shops = 4\n",
    "no_items = 2\n",
    "\n",
    "# Actions (shops) and reward for buying an item\n",
    "actions = range(no_shops)\n",
    "reward_buying = 50\n",
    "\n",
    "# Bernoulli variable for each shop indicating item availability\n",
    "bernoulli = np.random.rand(no_shops, no_items)\n",
    "\n",
    "# Price bias for each shop\n",
    "bias = np.random.normal(0, 5, no_shops)\n",
    "\n",
    "# Distance Matrix between shops\n",
    "a = np.random.uniform(1, 10, (no_shops, no_shops))\n",
    "distance_matrix = np.tril(a) + np.tril(a, -1).T\n",
    "np.fill_diagonal(distance_matrix, 0)\n",
    "\n",
    "# Display the distance matrix between shops\n",
    "print('Distance between shops')\n",
    "print(distance_matrix)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e85e6f23",
   "metadata": {},
   "outputs": [],
   "source": [
    "def price_penalty(next_state):\n",
    "    \"\"\"\n",
    "    Calculate a price penalty for a given next state.\n",
    "\n",
    "    Parameters:\n",
    "    - next_state (tuple): A tuple containing information about the next state.\n",
    "                          next_state[0] represents the selected shop,\n",
    "                          next_state[1] is a binary array indicating the availability of items.\n",
    "\n",
    "    Returns:\n",
    "    - float: The calculated price penalty, scaled by a factor.\n",
    "\n",
    "    \"\"\"\n",
    "    # Scaling factor for the price penalty\n",
    "    scaling = 0.1\n",
    "\n",
    "    # Extract shop and availability status from the next state\n",
    "    shop = next_state[0]\n",
    "    next_status = next_state[1]\n",
    "\n",
    "    # Initialize the total price\n",
    "    price = 0\n",
    "\n",
    "    # Calculate the price based on the availability of items in the selected shop\n",
    "    for item_no in range(len(next_status)):\n",
    "        if next_state[1][item_no]:\n",
    "            # Add a random price based on the Maximum Retail Price (MRP) and shop bias\n",
    "            price = price + np.random.normal(MRPs[item_no] + bias[shop], 1)\n",
    "\n",
    "    # Apply scaling and return the negative of the total price as a penalty\n",
    "    return -price * scaling\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ea2c35c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def distance_penalty(distance):\n",
    "    return -distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2bb66f0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def availability_in_shop(current_state, next_state):\n",
    "    \"\"\"\n",
    "    Calculate the probability of item availability in the next shop based on the transition from the current state.\n",
    "\n",
    "    Parameters:\n",
    "    - current_state (tuple): A tuple containing information about the current state.\n",
    "                            current_state[1] is a binary array indicating the availability of items.\n",
    "    - next_state (tuple): A tuple containing information about the next state.\n",
    "                         next_state[0] represents the selected shop,\n",
    "                         next_state[1] is a binary array indicating the availability of items.\n",
    "\n",
    "    Returns:\n",
    "    - float: The calculated probability of item availability in the next shop.\n",
    "\n",
    "    \"\"\"\n",
    "    # Extract availability status and the next shop from the current and next states\n",
    "    old_status = current_state[1]\n",
    "    new_status = next_state[1]\n",
    "    next_shop = next_state[0]\n",
    "    \n",
    "    # Initialize probability to 1\n",
    "    prob = 1\n",
    "    \n",
    "    # Calculate the probability based on item availability transitions\n",
    "    for item_no in range(len(old_status)):\n",
    "        if old_status[item_no] == 0:\n",
    "            if new_status[item_no] == 0:\n",
    "                # If an item was not available and remains unavailable, multiply by the complement of the Bernoulli probability\n",
    "                prob = prob * (1 - bernoulli[next_shop][item_no])\n",
    "            else:\n",
    "                # If an item was not available but becomes available, multiply by the Bernoulli probability\n",
    "                prob = prob * bernoulli[next_shop][item_no]\n",
    "        else:\n",
    "            if new_status[item_no] == 0:\n",
    "                # If an item was available but becomes unavailable, set probability to 0\n",
    "                prob = 0\n",
    "                \n",
    "    return prob\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f072fe31",
   "metadata": {},
   "outputs": [],
   "source": [
    "def M(shop_b,shop_a):\n",
    "    temp=sum(sum(np.triu(distance_matrix)))\n",
    "    temp2=(temp-distance_matrix[shop_b,shop_a])/((no_shops-1)*temp)\n",
    "    return temp2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7e0ca7f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State Space Size\n",
      "16\n"
     ]
    }
   ],
   "source": [
    "# Creating State Space\n",
    "state_space = []  # List to store all possible states\n",
    "\n",
    "# Generating all possible combinations of buying statuses for items\n",
    "all_possible_buying_statuses = list(itertools.product([0, 1], repeat=no_items))\n",
    "\n",
    "# Loop through each shop and buying status combination to create states\n",
    "for shop_no in range(no_shops):\n",
    "    for buying_status in all_possible_buying_statuses:\n",
    "        # Each state is represented as a tuple containing the shop number and the buying status of each item\n",
    "        state = (shop_no, buying_status)\n",
    "        state_space.append(state)  # Add the state to the state space list\n",
    "\n",
    "# Print the size of the generated state space\n",
    "print('State Space Size')\n",
    "print(len(state_space))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "82ef028a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Next transition\n",
      "(0, (0, 0)) 0 (0, (0, 0)) 0.14433908505041923 -0.0\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (0, (0, 1)) 0.21248138674779585 39.36804254768704\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (0, (1, 0)) 0.260175499897622 47.27079241020378\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (0, (1, 1)) 0.3830040283041629 86.37006713977853\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (1, (0, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (1, (0, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (1, (1, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (1, (1, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (2, (0, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (2, (0, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (2, (1, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (2, (1, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (3, (0, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (3, (0, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (3, (1, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 0 (3, (1, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (0, (0, 0)) 0.004811302835013975 -19.414532868225432\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (0, (0, 1)) 0.007082712891593195 20.021259039864844\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (0, (1, 0)) 0.008672516663254068 27.774093757727716\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (0, (1, 1)) 0.012766800943472097 67.20560003920414\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (1, (0, 0)) 0.20458759118163883 -9.707266434112716\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (1, (0, 1)) 0.02890581476284558 29.68209506597663\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (1, (1, 0)) 0.5839949870657897 37.72686711070044\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (1, (1, 1)) 0.08251160698972598 77.00778120347148\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (2, (0, 0)) 0.000918665282266235 -14.972872387905994\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (2, (0, 1)) 0.00017886406116937806 24.788167828279214\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (2, (1, 0)) 0.021734827425141694 32.7796725388854\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (2, (1, 1)) 0.0042317692603841914 72.5292892616803\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (3, (0, 0)) 0.0027437205682239595 -13.173091731957781\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (3, (0, 1)) 0.011733448924723975 27.384565440896168\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (3, (1, 0)) 0.002647144901329344 35.6100644960875\n",
      "Next transition\n",
      "(0, (0, 0)) 1 (3, (1, 1)) 0.011320445622564587 76.07251371664934\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (0, (0, 0)) 0.004811302835013975 -11.028136565827202\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (0, (0, 1)) 0.007082712891593195 28.412067728039865\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (0, (1, 0)) 0.008672516663254068 36.24479860608778\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (0, (1, 1)) 0.012766800943472097 75.39033340130571\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (1, (0, 0)) 0.005068470941134678 -10.779674236706878\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (1, (0, 1)) 0.000716115192075507 28.589442438775194\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (1, (1, 0)) 0.014467943068371807 36.590245547375794\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (1, (1, 1)) 0.0020441497938281806 76.00595294916673\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (2, (0, 0)) 0.03054961956483829 -5.514068282913601\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (2, (0, 1)) 0.005948008625151132 34.18774616738936\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (2, (1, 0)) 0.722777623105021 42.4224575417981\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (2, (1, 1)) 0.14072474870498952 82.21108533180096\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (3, (0, 0)) 0.0027437205682239595 -6.5798319957574645\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (3, (0, 1)) 0.011733448924723975 34.09609300545304\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (3, (1, 0)) 0.002647144901329344 42.2285638758884\n",
      "Next transition\n",
      "(0, (0, 0)) 2 (3, (1, 1)) 0.011320445622564587 82.77210708900736\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (0, (0, 0)) 0.004811302835013975 -8.599469044313041\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (0, (0, 1)) 0.007082712891593195 30.65841274125146\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (0, (1, 0)) 0.008672516663254068 38.769155483300224\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (0, (1, 1)) 0.012766800943472097 77.8714281772098\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (1, (0, 0)) 0.005068470941134678 -7.765559820001585\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (1, (0, 1)) 0.000716115192075507 31.781842692638214\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (1, (1, 0)) 0.014467943068371807 39.791566363349894\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (1, (1, 1)) 0.0020441497938281806 79.10321364964415\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (2, (0, 0)) 0.000918665282266235 -5.365498235000384\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (2, (0, 1)) 0.00017886406116937806 34.52603768518332\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (2, (1, 0)) 0.021734827425141694 42.526211751616486\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (2, (1, 1)) 0.0042317692603841914 82.06323227670046\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (3, (0, 0)) 0.08681207048115316 -4.299734522156521\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (3, (0, 1)) 0.37124953861445986 36.316559787691965\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (3, (1, 0)) 0.08375638992158119 44.423601766644886\n",
      "Next transition\n",
      "(0, (0, 0)) 3 (3, (1, 1)) 0.3581820009828058 85.32324405242761\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (0, (0, 0)) 0 -0.0\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (0, (0, 1)) 0.3568204717982151 39.4504559234648\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (0, (1, 0)) 0 47.35681164974929\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (0, (1, 1)) 0.6431795282017849 86.55301128156071\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (1, (0, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (1, (0, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (1, (1, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (1, (1, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (2, (0, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (2, (0, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (2, (1, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (2, (1, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (3, (0, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (3, (0, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (3, (1, 0)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 0 (3, (1, 1)) 0 None\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (0, (0, 0)) 0.0 -19.414532868225432\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (0, (0, 1)) 0.011894015726607168 20.093839786197297\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (0, (1, 0)) 0.0 27.880801074422077\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (0, (1, 1)) 0.021439317606726162 67.27773122579706\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (1, (0, 0)) 0.0 -9.707266434112716\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (1, (0, 1)) 0.23349340594448442 29.832004585739945\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (1, (1, 0)) 0.0 37.745119134077044\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (1, (1, 1)) 0.6665065940555156 77.07393936079532\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (2, (0, 0)) 0.0 -14.972872387905994\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (2, (0, 1)) 0.001097529343435613 24.81527306176357\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (2, (1, 0)) 0.0 32.71771659463147\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (2, (1, 1)) 0.025966596685525888 72.69455312402818\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (3, (0, 0)) 0.0 -13.173091731957781\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (3, (0, 1)) 0.014477169492947934 27.378257101947554\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (3, (1, 0)) 0.0 35.42414753774506\n",
      "Next transition\n",
      "(0, (0, 1)) 1 (3, (1, 1)) 0.013967590523893932 76.17401947696177\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (0, (0, 0)) 0.0 -11.028136565827202\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (0, (0, 1)) 0.011894015726607168 28.096049432017676\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (0, (1, 0)) 0.0 36.247781797984615\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (0, (1, 1)) 0.021439317606726162 75.92005685858659\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (1, (0, 0)) 0.0 -10.779674236706878\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (1, (0, 1)) 0.0057845861332101855 28.8730582000537\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (1, (1, 0)) 0.0 36.68509937936252\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (1, (1, 1)) 0.016512092862199988 76.33428907551782\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (2, (0, 0)) 0.0 -5.514068282913601\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (2, (0, 1)) 0.03649762818998942 34.32416914738366\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (2, (1, 0)) 0.0 42.13629773231888\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (2, (1, 1)) 0.8635023718100105 82.44670645733316\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (3, (0, 0)) 0.0 -6.5798319957574645\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (3, (0, 1)) 0.014477169492947934 34.176271568777466\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (3, (1, 0)) 0.0 42.07276905436393\n",
      "Next transition\n",
      "(0, (0, 1)) 2 (3, (1, 1)) 0.013967590523893932 82.82858356599618\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (0, (0, 0)) 0.0 -8.599469044313041\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (0, (0, 1)) 0.011894015726607168 30.71189163172155\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (0, (1, 0)) 0.0 38.709041925202875\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (0, (1, 1)) 0.021439317606726162 78.02937550691078\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (1, (0, 0)) 0.0 -7.765559820001585\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (1, (0, 1)) 0.0057845861332101855 31.513113558163145\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (1, (1, 0)) 0.0 39.665667090303835\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (1, (1, 1)) 0.016512092862199988 78.78691674110377\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (2, (0, 0)) 0.0 -5.365498235000384\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (2, (0, 1)) 0.001097529343435613 34.57091644995304\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (2, (1, 0)) 0.0 42.42907181540073\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (2, (1, 1)) 0.025966596685525888 82.32184335510274\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (3, (0, 0)) 0.0 -4.299734522156521\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (3, (0, 1)) 0.458061609095613 36.18701262612085\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (3, (1, 0)) 0.0 44.2912667626915\n",
      "Next transition\n",
      "(0, (0, 1)) 3 (3, (1, 1)) 0.441938390904387 84.92218731202465\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (0, (0, 0)) 0.0 -0.0\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (0, (0, 1)) 0.0 39.44572627604819\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (0, (1, 0)) 0.40451458494804127 47.47720779296479\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (0, (1, 1)) 0.5954854150519587 86.52335224258375\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (1, (0, 0)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (1, (0, 1)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (1, (1, 0)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (1, (1, 1)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (2, (0, 0)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (2, (0, 1)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (2, (1, 0)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (2, (1, 1)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (3, (0, 0)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (3, (0, 1)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (3, (1, 0)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 0 (3, (1, 1)) 0 None\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (0, (0, 0)) 0.0 -19.414532868225432\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (0, (0, 1)) 0.0 19.932282402191593\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (0, (1, 0)) 0.013483819498268042 28.093856319865246\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (0, (1, 1)) 0.01984951383506529 67.23104844561524\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (1, (0, 0)) 0.0 -9.707266434112716\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (1, (0, 1)) 0.0 29.747277547630176\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (1, (1, 0)) 0.7885825782474285 37.62069199309787\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (1, (1, 1)) 0.11141742175257156 77.1332594246082\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (2, (0, 0)) 0.0 -14.972872387905994\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (2, (0, 1)) 0.0 24.92820659737169\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (2, (1, 0)) 0.02265349270740793 32.85383993868588\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (2, (1, 1)) 0.00441063332155357 72.7162368099789\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (3, (0, 0)) 0.0 -13.173091731957781\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (3, (0, 1)) 0.0 27.5465472659675\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (3, (1, 0)) 0.005390865469553304 35.67219144026745\n",
      "Next transition\n",
      "(0, (1, 0)) 1 (3, (1, 1)) 0.02305389454728856 76.29276520022381\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (0, (0, 0)) 0.0 -11.028136565827202\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (0, (0, 1)) 0.0 28.21932643118037\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (0, (1, 0)) 0.013483819498268042 36.14890139324081\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (0, (1, 1)) 0.01984951383506529 75.47629660095137\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (1, (0, 0)) 0.0 -10.779674236706878\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (1, (0, 1)) 0.0 28.65465269342831\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (1, (1, 0)) 0.019536414009506484 36.643591100773186\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (1, (1, 1)) 0.002760264985903688 76.15364190998511\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (2, (0, 0)) 0.0 -5.514068282913601\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (2, (0, 1)) 0.0 34.38005740280891\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (2, (1, 0)) 0.7533272426698594 42.31755374105024\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (2, (1, 1)) 0.14667275733014065 82.33086434765315\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (3, (0, 0)) 0.0 -6.5798319957574645\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (3, (0, 1)) 0.0 34.182311016469114\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (3, (1, 0)) 0.005390865469553304 42.18706402907053\n",
      "Next transition\n",
      "(0, (1, 0)) 2 (3, (1, 1)) 0.02305389454728856 82.8532449165483\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (0, (0, 0)) 0.0 -8.599469044313041\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (0, (0, 1)) 0.0 30.54822278503875\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (0, (1, 0)) 0.013483819498268042 38.63522748626901\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (0, (1, 1)) 0.01984951383506529 77.85277511096325\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (1, (0, 0)) 0.0 -7.765559820001585\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (1, (0, 1)) 0.0 31.609659739310466\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (1, (1, 0)) 0.019536414009506484 39.58362421021073\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (1, (1, 1)) 0.002760264985903688 79.18518352005933\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (2, (0, 0)) 0.0 -5.365498235000384\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (2, (0, 1)) 0.0 34.583517064010124\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (2, (1, 0)) 0.02265349270740793 42.36680193843415\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (2, (1, 1)) 0.00441063332155357 82.43176227203273\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (3, (0, 0)) 0.0 -4.299734522156521\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (3, (0, 1)) 0.0 36.27210557240676\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (3, (1, 0)) 0.17056846040273435 44.25621372270214\n",
      "Next transition\n",
      "(0, (1, 0)) 3 (3, (1, 1)) 0.7294315395972657 84.99671463180124\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (0, (0, 0)) 0.1299051765453773 -9.707266434112716\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (0, (0, 1)) 0.19123324807301625 29.678063730130802\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (0, (1, 0)) 0.23415794990785982 37.77459260881636\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (0, (1, 1)) 0.3447036254737466 76.80832995264927\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (1, (0, 0)) 0.00757731819191255 -19.414532868225432\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (1, (0, 1)) 0.0010705857319572437 20.09188950397511\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (1, (1, 0)) 0.021629443965399613 28.035943620873248\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (1, (1, 1)) 0.0030559854440639256 67.43160102330864\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (2, (0, 0)) 0.0009282540840251243 -15.221334717026316\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (2, (0, 1)) 0.00018073100014862422 24.73973984747097\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (2, (1, 0)) 0.021961690196018624 32.71401229380471\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (2, (1, 1)) 0.004275939424763416 72.19647778464005\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (3, (0, 0)) 0.0028351733402254297 -14.007000956269238\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (3, (0, 1)) 0.01212454430146574 26.550896016580076\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (3, (1, 0)) 0.0027353786456544207 34.65851456603261\n",
      "Next transition\n",
      "(1, (0, 0)) 0 (3, (1, 1)) 0.011697774912021201 75.1867120506002\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (0, (0, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (0, (0, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (0, (1, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (0, (1, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (1, (0, 0)) 0.22731954575737648 -0.0\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (1, (0, 1)) 0.03211757195871731 39.5669569956964\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (1, (1, 0)) 0.6488833189619885 47.29900077417422\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (1, (1, 1)) 0.09167956332191776 87.12155890196777\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (2, (0, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (2, (0, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (2, (1, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (2, (1, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (3, (0, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (3, (0, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (3, (1, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 1 (3, (1, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (0, (0, 0)) 0.0032182822458604048 -10.779674236706878\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (0, (0, 1)) 0.0047376292728152055 28.576433738050945\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (0, (1, 0)) 0.00580104960368765 36.42005996018344\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (0, (1, 1)) 0.008539717873046913 75.89754479014807\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (1, (0, 0)) 0.00757731819191255 -10.531211907586556\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (1, (0, 1)) 0.0010705857319572437 29.064176987042174\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (1, (1, 0)) 0.021629443965399613 36.94003420274689\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (1, (1, 1)) 0.0030559854440639256 76.25668219909194\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (2, (0, 0)) 0.03054961956483829 -5.265605953793278\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (2, (0, 1)) 0.005948008625151132 34.65998362283107\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (2, (1, 0)) 0.722777623105021 42.516684167839216\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (2, (1, 1)) 0.14072474870498952 82.14810252420914\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (3, (0, 0)) 0.0028351733402254297 -6.3313696666371415\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (3, (0, 1)) 0.01212454430146574 34.46054191601735\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (3, (1, 0)) 0.0027353786456544207 42.41720758692345\n",
      "Next transition\n",
      "(1, (0, 0)) 2 (3, (1, 1)) 0.011697774912021201 83.17733977610119\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (0, (0, 0)) 0.0032182822458604048 -7.765559820001585\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (0, (0, 1)) 0.0047376292728152055 31.59158501659092\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (0, (1, 0)) 0.00580104960368765 39.61873035338697\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (0, (1, 1)) 0.008539717873046913 78.77685641176814\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (1, (0, 0)) 0.00757731819191255 -6.9316505956901295\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (1, (0, 1)) 0.0010705857319572437 32.451811286586626\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (1, (1, 0)) 0.021629443965399613 40.44186985059394\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (1, (1, 1)) 0.0030559854440639256 80.04003393174797\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (2, (0, 0)) 0.0009282540840251243 -4.531589010688928\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (2, (0, 1)) 0.00018073100014862422 35.176099622336835\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (2, (1, 0)) 0.021961690196018624 43.207101617364756\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (2, (1, 1)) 0.004275939424763416 83.26323019401065\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (3, (0, 0)) 0.08681207048115316 -3.4658252978450648\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (3, (0, 1)) 0.37124953861445986 37.135592258329744\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (3, (1, 0)) 0.08375638992158119 45.298046805407644\n",
      "Next transition\n",
      "(1, (0, 0)) 3 (3, (1, 1)) 0.3581820009828058 85.83415214733496\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (0, (0, 0)) 0.0 -9.707266434112716\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (0, (0, 1)) 0.3211384246183936 29.555682576510286\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (0, (1, 0)) 0.0 37.60524105403987\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (0, (1, 1)) 0.5788615753816064 76.95312155233607\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (1, (0, 0)) 0.0 -19.414532868225432\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (1, (0, 1)) 0.008647903923869793 20.085501251397915\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (1, (1, 0)) 0.0 28.163649129300016\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (1, (1, 1)) 0.02468542940946354 67.1333870759545\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (2, (0, 0)) 0.0 -15.221334717026316\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (2, (0, 1)) 0.0011089850841737485 24.65080269709196\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (2, (1, 0)) 0.0 32.540473019993414\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (2, (1, 1)) 0.026237629620782042 72.50606533955056\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (3, (0, 0)) 0.0 -14.007000956269238\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (3, (0, 1)) 0.014959717641691168 26.611555076056888\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (3, (1, 0)) 0.0 34.64314097200635\n",
      "Next transition\n",
      "(1, (0, 1)) 0 (3, (1, 1)) 0.014433153557675622 75.12097680676207\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (0, (0, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (0, (0, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (0, (1, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (0, (1, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (1, (0, 0)) 0 -0.0\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (1, (0, 1)) 0.2594371177160938 39.30881602858001\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (1, (1, 0)) 0 47.20079511141672\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (1, (1, 1)) 0.7405628822839062 86.79236206604334\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (2, (0, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (2, (0, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (2, (1, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (2, (1, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (3, (0, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (3, (0, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (3, (1, 0)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 1 (3, (1, 1)) 0 None\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (0, (0, 0)) 0.0 -10.779674236706878\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (0, (0, 1)) 0.007955911518675609 28.381403537741775\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (0, (1, 0)) 0.0 36.4146969103885\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (0, (1, 1)) 0.014340767476734562 75.73705064638395\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (1, (0, 0)) 0.0 -10.531211907586556\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (1, (0, 1)) 0.008647903923869793 28.883847384467984\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (1, (1, 0)) 0.0 37.16433787170301\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (1, (1, 1)) 0.02468542940946354 76.24652667074074\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (2, (0, 0)) 0.0 -5.265605953793278\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (2, (0, 1)) 0.03649762818998942 34.692131690523524\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (2, (1, 0)) 0.0 42.7030705089555\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (2, (1, 1)) 0.8635023718100105 82.48982292017709\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (3, (0, 0)) 0.0 -6.3313696666371415\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (3, (0, 1)) 0.014959717641691168 34.38939901227568\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (3, (1, 0)) 0.0 42.365523621794566\n",
      "Next transition\n",
      "(1, (0, 1)) 2 (3, (1, 1)) 0.014433153557675622 83.12298531070945\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (0, (0, 0)) 0.0 -7.765559820001585\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (0, (0, 1)) 0.007955911518675609 31.68462107720401\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (0, (1, 0)) 0.0 39.50174464652288\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (0, (1, 1)) 0.014340767476734562 78.9862719493705\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (1, (0, 0)) 0.0 -6.9316505956901295\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (1, (0, 1)) 0.008647903923869793 32.330340891348364\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (1, (1, 0)) 0.0 40.44479698578878\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (1, (1, 1)) 0.02468542940946354 80.09067204849046\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (2, (0, 0)) 0.0 -4.531589010688928\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (2, (0, 1)) 0.0011089850841737485 35.384600189673336\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (2, (1, 0)) 0.0 43.23079159727604\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (2, (1, 1)) 0.026237629620782042 83.1937368752111\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (3, (0, 0)) 0.0 -3.4658252978450648\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (3, (0, 1)) 0.458061609095613 37.238902159606845\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (3, (1, 0)) 0.0 45.25266344087798\n",
      "Next transition\n",
      "(1, (0, 1)) 3 (3, (1, 1)) 0.441938390904387 85.8477740515025\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (0, (0, 0)) 0.0 -9.707266434112716\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (0, (0, 1)) 0.0 29.56393877582952\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (0, (1, 0)) 0.36406312645323713 37.49848826554131\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (0, (1, 1)) 0.5359368735467629 76.94718263764449\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (1, (0, 0)) 0.0 -19.414532868225432\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (1, (0, 1)) 0.0 20.092516496563288\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (1, (1, 0)) 0.029206762157312164 27.857245999545388\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (1, (1, 1)) 0.004126571176021169 67.36890574326944\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (2, (0, 0)) 0.0 -15.221334717026316\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (2, (0, 1)) 0.0 25.00172430699714\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (2, (1, 0)) 0.022889944280043754 32.711360357026784\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (2, (1, 1)) 0.004456670424912041 72.82094638375136\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (3, (0, 0)) 0.0 -14.007000956269238\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (3, (0, 1)) 0.0 26.606630824532356\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (3, (1, 0)) 0.005570551985879851 34.705089711107604\n",
      "Next transition\n",
      "(1, (1, 0)) 0 (3, (1, 1)) 0.023822319213486938 75.26078889742276\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (0, (0, 0)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (0, (0, 1)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (0, (1, 0)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (0, (1, 1)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (1, (0, 0)) 0.0 -0.0\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (1, (0, 1)) 0.0 39.597574764100855\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (1, (1, 0)) 0.8762028647193649 47.37960849927438\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (1, (1, 1)) 0.12379713528063507 86.82012081003573\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (2, (0, 0)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (2, (0, 1)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (2, (1, 0)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (2, (1, 1)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (3, (0, 0)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (3, (0, 1)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (3, (1, 0)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 1 (3, (1, 1)) 0 None\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (0, (0, 0)) 0.0 -10.779674236706878\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (0, (0, 1)) 0.0 28.530922624637796\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (0, (1, 0)) 0.009019331849548055 36.62626972533099\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (0, (1, 1)) 0.013277347145862116 75.77345420109371\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (1, (0, 0)) 0.0 -10.531211907586556\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (1, (0, 1)) 0.0 28.947699859067882\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (1, (1, 0)) 0.029206762157312164 36.981530023755916\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (1, (1, 1)) 0.004126571176021169 76.09554621192004\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (2, (0, 0)) 0.0 -5.265605953793278\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (2, (0, 1)) 0.0 34.59032927966214\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (2, (1, 0)) 0.7533272426698594 42.782083679256765\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (2, (1, 1)) 0.14667275733014065 82.44492707478602\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (3, (0, 0)) 0.0 -6.3313696666371415\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (3, (0, 1)) 0.0 34.54744276543025\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (3, (1, 0)) 0.005570551985879851 42.541489668573966\n",
      "Next transition\n",
      "(1, (1, 0)) 2 (3, (1, 1)) 0.023822319213486938 82.96298955924878\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (0, (0, 0)) 0.0 -7.765559820001585\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (0, (0, 1)) 0.0 31.579334961445138\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (0, (1, 0)) 0.009019331849548055 39.66371171512894\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (0, (1, 1)) 0.013277347145862116 78.67598255305178\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (1, (0, 0)) 0.0 -6.9316505956901295\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (1, (0, 1)) 0.0 32.47963949126479\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (1, (1, 0)) 0.029206762157312164 40.492084395816825\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (1, (1, 1)) 0.004126571176021169 79.90908938133734\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (2, (0, 0)) 0.0 -4.531589010688928\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (2, (0, 1)) 0.0 35.4288033791511\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (2, (1, 0)) 0.022889944280043754 43.16851603168902\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (2, (1, 1)) 0.004456670424912041 83.15196461664642\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (3, (0, 0)) 0.0 -3.4658252978450648\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (3, (0, 1)) 0.0 37.20866316230047\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (3, (1, 0)) 0.17056846040273435 45.29817744458681\n",
      "Next transition\n",
      "(1, (1, 0)) 3 (3, (1, 1)) 0.7294315395972657 86.00526949701674\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (0, (0, 0)) 0.1299051765453773 -5.514068282913601\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (0, (0, 1)) 0.19123324807301625 33.87814563219913\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (0, (1, 0)) 0.23415794990785982 41.83768394662586\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (0, (1, 1)) 0.3447036254737466 81.20422913378778\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (1, (0, 0)) 0.006216420032732543 -15.221334717026316\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (1, (0, 1)) 0.0008783068656137346 24.14781697328973\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (1, (1, 0)) 0.01774476211212643 32.24854515812895\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (1, (1, 1)) 0.002507125694483082 71.46111174893863\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (2, (0, 0)) 0.001131467391290307 -11.028136565827202\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (2, (0, 1)) 0.0002202966157463382 28.91525100849839\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (2, (1, 0)) 0.02676954159648226 36.84050673453247\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (2, (1, 1)) 0.005212027729814426 76.71797652786996\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (3, (0, 0)) 0.0030983821866125585 -9.813802805070122\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (3, (0, 1)) 0.013250150017800772 30.701205130170862\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (3, (1, 0)) 0.0029893228569446693 38.92829962142596\n",
      "Next transition\n",
      "(2, (0, 0)) 0 (3, (1, 1)) 0.012783760659772546 79.5506291271366\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (0, (0, 0)) 0.003906411188709539 -14.972872387905994\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (0, (0, 1)) 0.005750623029750857 24.114904299564213\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (0, (1, 0)) 0.0070414225188773025 32.24635916022714\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (0, (1, 1)) 0.010365669291623804 71.7123380637482\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (1, (0, 0)) 0.20458759118163883 -5.265605953793278\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (1, (0, 1)) 0.02890581476284558 34.16739407652417\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (1, (1, 0)) 0.5839949870657897 42.22914716769371\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (1, (1, 1)) 0.08251160698972598 81.63617168278017\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (2, (0, 0)) 0.001131467391290307 -10.531211907586556\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (2, (0, 1)) 0.0002202966157463382 29.40308199903493\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (2, (1, 0)) 0.02676954159648226 37.15514458605928\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (2, (1, 1)) 0.005212027729814426 77.00555549476638\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (3, (0, 0)) 0.0030983821866125585 -8.731431251638343\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (3, (0, 1)) 0.013250150017800772 32.01444340765451\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (3, (1, 0)) 0.0029893228569446693 39.9430720553891\n",
      "Next transition\n",
      "(2, (0, 0)) 1 (3, (1, 1)) 0.012783760659772546 80.5772019058877\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (0, (0, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (0, (0, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (0, (1, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (0, (1, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (1, (0, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (1, (0, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (1, (1, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (1, (1, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (2, (0, 0)) 0.03394402173870921 -0.0\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (2, (0, 1)) 0.006608898472390146 39.84698782208271\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (2, (1, 0)) 0.8030862478944678 47.78677891973689\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (2, (1, 1)) 0.15636083189443278 87.6472159143097\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (3, (0, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (3, (0, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (3, (1, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 2 (3, (1, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (0, (0, 0)) 0.003906411188709539 -5.365498235000384\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (0, (0, 1)) 0.005750623029750857 33.74718060608929\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (0, (1, 0)) 0.0070414225188773025 41.905086891999815\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (0, (1, 1)) 0.010365669291623804 81.1840452343059\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (1, (0, 0)) 0.006216420032732543 -4.531589010688928\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (1, (0, 1)) 0.0008783068656137346 34.83181824056677\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (1, (1, 0)) 0.01774476211212643 42.96165785271622\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (1, (1, 1)) 0.002507125694483082 82.33007362369564\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (2, (0, 0)) 0.001131467391290307 -2.131527425687727\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (2, (0, 1)) 0.0002202966157463382 37.697795521015465\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (2, (1, 0)) 0.02676954159648226 45.63645534577006\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (2, (1, 1)) 0.005212027729814426 85.66891284119403\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (3, (0, 0)) 0.08681207048115316 -1.0657637128438635\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (3, (0, 1)) 0.37124953861445986 39.78700721297038\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (3, (1, 0)) 0.08375638992158119 47.416096763090756\n",
      "Next transition\n",
      "(2, (0, 0)) 3 (3, (1, 1)) 0.3581820009828058 88.21928167171275\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (0, (0, 0)) 0.0 -5.514068282913601\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (0, (0, 1)) 0.3211384246183936 33.839409110673074\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (0, (1, 0)) 0.0 41.78503174705079\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (0, (1, 1)) 0.5788615753816064 81.28512673499174\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (1, (0, 0)) 0.0 -15.221334717026316\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (1, (0, 1)) 0.0070947268983462776 24.065768156560985\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (1, (1, 0)) 0.0 32.263061658792715\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (1, (1, 1)) 0.020251887806609515 71.55975612890884\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (2, (0, 0)) 0.0 -11.028136565827202\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (2, (0, 1)) 0.001351764007036645 28.817547091466096\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (2, (1, 0)) 0.0 36.93874984377224\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (2, (1, 1)) 0.031981569326296685 76.67842815082113\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (3, (0, 0)) 0.0 -9.813802805070122\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (3, (0, 1)) 0.01634853220441333 30.671647941878355\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (3, (1, 0)) 0.0 38.71528061066646\n",
      "Next transition\n",
      "(2, (0, 1)) 0 (3, (1, 1)) 0.015773083516717214 79.74766722870575\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (0, (0, 0)) 0.0 -14.972872387905994\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (0, (0, 1)) 0.009657034218460396 24.312580857665136\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (0, (1, 0)) 0.0 32.21455759446295\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (0, (1, 1)) 0.017407091810501103 71.53186803590094\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (1, (0, 0)) 0.0 -5.265605953793278\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (1, (0, 1)) 0.23349340594448442 33.99739610907775\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (1, (1, 0)) 0.0 42.0266068560639\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (1, (1, 1)) 0.6665065940555156 81.30124143542264\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (2, (0, 0)) 0.0 -10.531211907586556\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (2, (0, 1)) 0.001351764007036645 29.32694967785544\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (2, (1, 0)) 0.0 37.240950745591974\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (2, (1, 1)) 0.031981569326296685 77.20255577879206\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (3, (0, 0)) 0.0 -8.731431251638343\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (3, (0, 1)) 0.01634853220441333 31.863561178736425\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (3, (1, 0)) 0.0 39.807199083047045\n",
      "Next transition\n",
      "(2, (0, 1)) 1 (3, (1, 1)) 0.015773083516717214 80.49942829795387\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (0, (0, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (0, (0, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (0, (1, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (0, (1, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (1, (0, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (1, (0, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (1, (1, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (1, (1, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (2, (0, 0)) 0 -0.0\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (2, (0, 1)) 0.04055292021109935 39.82480558628679\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (2, (1, 0)) 0 47.75823525188897\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (2, (1, 1)) 0.9594470797889006 87.62215541282862\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (3, (0, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (3, (0, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (3, (1, 0)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 2 (3, (1, 1)) 0 None\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (0, (0, 0)) 0.0 -5.365498235000384\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (0, (0, 1)) 0.009657034218460396 34.03177255450344\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (0, (1, 0)) 0.0 42.08272036690996\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (0, (1, 1)) 0.017407091810501103 80.98602272997113\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (1, (0, 0)) 0.0 -4.531589010688928\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (1, (0, 1)) 0.0070947268983462776 34.96934265542042\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (1, (1, 0)) 0.0 42.851733719842144\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (1, (1, 1)) 0.020251887806609515 82.23795392872609\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (2, (0, 0)) 0.0 -2.131527425687727\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (2, (0, 1)) 0.001351764007036645 37.62496106584402\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (2, (1, 0)) 0.0 45.757584149120994\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (2, (1, 1)) 0.031981569326296685 85.30437910800458\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (3, (0, 0)) 0.0 -1.0657637128438635\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (3, (0, 1)) 0.458061609095613 39.62630642169347\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (3, (1, 0)) 0.0 47.609559681955425\n",
      "Next transition\n",
      "(2, (0, 1)) 3 (3, (1, 1)) 0.441938390904387 88.12417948159077\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (0, (0, 0)) 0.0 -5.514068282913601\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (0, (0, 1)) 0.0 33.72922769227313\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (0, (1, 0)) 0.36406312645323713 41.80776738612422\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (0, (1, 1)) 0.5359368735467629 80.86554132895958\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (1, (0, 0)) 0.0 -15.221334717026316\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (1, (0, 1)) 0.0 24.25343152249544\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (1, (1, 0)) 0.023961182144858977 32.407475157511264\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (1, (1, 1)) 0.003385432560096817 71.61536973153497\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (2, (0, 0)) 0.0 -11.028136565827202\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (2, (0, 1)) 0.0 28.793067031217635\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (2, (1, 0)) 0.02790100898777257 36.81337131089734\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (2, (1, 1)) 0.0054323243455607646 76.34223644137538\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (3, (0, 0)) 0.0 -9.813802805070122\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (3, (0, 1)) 0.0 30.8810967514466\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (3, (1, 0)) 0.006087705043557228 38.80119987646933\n",
      "Next transition\n",
      "(2, (1, 0)) 0 (3, (1, 1)) 0.026033910677573314 79.90843539806585\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (0, (0, 0)) 0.0 -14.972872387905994\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (0, (0, 1)) 0.0 24.4170803709612\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (0, (1, 0)) 0.010947833707586842 32.29797877846133\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (0, (1, 1)) 0.016116292321374657 71.65231444680555\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (1, (0, 0)) 0.0 -5.265605953793278\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (1, (0, 1)) 0.0 34.15573427971488\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (1, (1, 0)) 0.7885825782474285 42.24294031702928\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (1, (1, 1)) 0.11141742175257156 81.71894618149412\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (2, (0, 0)) 0.0 -10.531211907586556\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (2, (0, 1)) 0.0 29.641529372625747\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (2, (1, 0)) 0.02790100898777257 37.24011726004586\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (2, (1, 1)) 0.0054323243455607646 77.12308138490884\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (3, (0, 0)) 0.0 -8.731431251638343\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (3, (0, 1)) 0.0 31.898972044423374\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (3, (1, 0)) 0.006087705043557228 39.97759662815395\n",
      "Next transition\n",
      "(2, (1, 0)) 1 (3, (1, 1)) 0.026033910677573314 80.513177126177\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (0, (0, 0)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (0, (0, 1)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (0, (1, 0)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (0, (1, 1)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (1, (0, 0)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (1, (0, 1)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (1, (1, 0)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (1, (1, 1)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (2, (0, 0)) 0.0 -0.0\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (2, (0, 1)) 0.0 39.94781625261851\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (2, (1, 0)) 0.8370302696331771 47.82575852380384\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (2, (1, 1)) 0.16296973036682294 87.72145945404067\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (3, (0, 0)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (3, (0, 1)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (3, (1, 0)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 2 (3, (1, 1)) 0 None\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (0, (0, 0)) 0.0 -5.365498235000384\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (0, (0, 1)) 0.0 33.98118651112889\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (0, (1, 0)) 0.010947833707586842 41.99742366995625\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (0, (1, 1)) 0.016116292321374657 81.27106043280592\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (1, (0, 0)) 0.0 -4.531589010688928\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (1, (0, 1)) 0.0 34.79761675162766\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (1, (1, 0)) 0.023961182144858977 42.691052777272105\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (1, (1, 1)) 0.003385432560096817 82.38225007100625\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (2, (0, 0)) 0.0 -2.131527425687727\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (2, (0, 1)) 0.0 37.59235905738032\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (2, (1, 0)) 0.02790100898777257 45.68593448952807\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (2, (1, 1)) 0.0054323243455607646 85.54354606754919\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (3, (0, 0)) 0.0 -1.0657637128438635\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (3, (0, 1)) 0.0 39.63516001056604\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (3, (1, 0)) 0.17056846040273435 47.54489803857796\n",
      "Next transition\n",
      "(2, (1, 0)) 3 (3, (1, 1)) 0.7294315395972657 88.34252735250993\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (0, (0, 0)) 0.1299051765453773 -4.299734522156521\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (0, (0, 1)) 0.19123324807301625 35.103714900083574\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (0, (1, 0)) 0.23415794990785982 43.020088679268966\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (0, (1, 1)) 0.3447036254737466 82.33460682983126\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (1, (0, 0)) 0.0066815741295451325 -14.007000956269238\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (1, (0, 1)) 0.0009440276558189724 25.46128864790445\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (1, (1, 0)) 0.01907254381766736 33.39862537545086\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (1, (1, 1)) 0.0026947255963353208 72.8270627829577\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (2, (0, 0)) 0.0010903368223205187 -9.813802805070122\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (2, (0, 1)) 0.00021228849707008294 30.17598537748175\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (2, (1, 0)) 0.025796427845790677 37.988538793653994\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (2, (1, 1)) 0.005022562555949262 77.92122168255172\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (3, (0, 0)) 0.00321526186967234 -8.599469044313041\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (3, (0, 1)) 0.013749982911646662 32.14996402138391\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (3, (1, 0)) 0.0031020885156141185 39.99460312662209\n",
      "Next transition\n",
      "(3, (0, 0)) 0 (3, (1, 1)) 0.013266000036400216 80.77418690032462\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (0, (0, 0)) 0.004105690635309702 -13.173091731957781\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (0, (0, 1)) 0.0060439820540868164 26.06464222349119\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (0, (1, 0)) 0.007400629656849724 34.16895553072774\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (0, (1, 1)) 0.010894457670595624 73.41698486788235\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (1, (0, 0)) 0.20458759118163883 -3.4658252978450648\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (1, (0, 1)) 0.02890581476284558 36.01679349377593\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (1, (1, 0)) 0.5839949870657897 43.886125396516675\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (1, (1, 1)) 0.08251160698972598 83.28966746727222\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (2, (0, 0)) 0.0010903368223205187 -8.731431251638343\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (2, (0, 1)) 0.00021228849707008294 31.00651011214683\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (2, (1, 0)) 0.025796427845790677 39.20462527352504\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (2, (1, 1)) 0.005022562555949262 78.81526280290194\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (3, (0, 0)) 0.00321526186967234 -6.9316505956901295\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (3, (0, 1)) 0.013749982911646662 33.67639503215769\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (3, (1, 0)) 0.0031020885156141185 41.75498017489315\n",
      "Next transition\n",
      "(3, (0, 0)) 1 (3, (1, 1)) 0.013266000036400216 82.58301610879133\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (0, (0, 0)) 0.004105690635309702 -6.5798319957574645\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (0, (0, 1)) 0.0060439820540868164 32.735936811440936\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (0, (1, 0)) 0.007400629656849724 40.59363503521582\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (0, (1, 1)) 0.010894457670595624 80.13146601719423\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (1, (0, 0)) 0.0066815741295451325 -6.3313696666371415\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (1, (0, 1)) 0.0009440276558189724 33.02795773578438\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (1, (1, 0)) 0.01907254381766736 41.2189927292755\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (1, (1, 1)) 0.0026947255963353208 80.3060116488451\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (2, (0, 0)) 0.03054961956483829 -1.0657637128438635\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (2, (0, 1)) 0.005948008625151132 38.772816550067844\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (2, (1, 0)) 0.722777623105021 46.71739212206531\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (2, (1, 1)) 0.14072474870498952 86.82185984575896\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (3, (0, 0)) 0.00321526186967234 -2.131527425687727\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (3, (0, 1)) 0.013749982911646662 38.35289617245823\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (3, (1, 0)) 0.0031020885156141185 46.545068791383\n",
      "Next transition\n",
      "(3, (0, 0)) 2 (3, (1, 1)) 0.013266000036400216 87.43221539988716\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (0, (0, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (0, (0, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (0, (1, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (0, (1, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (1, (0, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (1, (0, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (1, (1, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (1, (1, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (2, (0, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (2, (0, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (2, (1, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (2, (1, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (3, (0, 0)) 0.09645785609017019 -0.0\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (3, (0, 1)) 0.41249948734939984 40.69643395971709\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (3, (1, 0)) 0.09306265546842354 48.84274171986061\n",
      "Next transition\n",
      "(3, (0, 0)) 3 (3, (1, 1)) 0.39798000109200643 89.27204306318865\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (0, (0, 0)) 0.0 -4.299734522156521\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (0, (0, 1)) 0.3211384246183936 35.26115387332422\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (0, (1, 0)) 0.0 42.935673056812504\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (0, (1, 1)) 0.5788615753816064 82.44722448911759\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (1, (0, 0)) 0.0 -14.007000956269238\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (1, (0, 1)) 0.007625601785364105 25.23764788399702\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (1, (1, 0)) 0.0 33.33749310718596\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (1, (1, 1)) 0.021767269414002685 72.86835848473635\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (2, (0, 0)) 0.0 -9.813802805070122\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (2, (0, 1)) 0.0013026253193906014 30.16694055227257\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (2, (1, 0)) 0.0 38.002065861173676\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (2, (1, 1)) 0.03081899040173994 77.91911813176617\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (3, (0, 0)) 0.0 -8.599469044313041\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (3, (0, 1)) 0.016965244781319 32.10857192039886\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (3, (1, 0)) 0.0 40.15292135978812\n",
      "Next transition\n",
      "(3, (0, 1)) 0 (3, (1, 1)) 0.016368088552014333 80.51429025450517\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (0, (0, 0)) 0.0 -13.173091731957781\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (0, (0, 1)) 0.010149672689396518 26.12325428445193\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (0, (1, 0)) 0.0 34.0597024392732\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (0, (1, 1)) 0.018295087327445347 73.25629591396752\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (1, (0, 0)) 0.0 -3.4658252978450648\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (1, (0, 1)) 0.23349340594448442 35.739966604295766\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (1, (1, 0)) 0.0 44.01871228722454\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (1, (1, 1)) 0.6665065940555156 83.48455570582081\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (2, (0, 0)) 0.0 -8.731431251638343\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (2, (0, 1)) 0.0013026253193906014 31.028229927774014\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (2, (1, 0)) 0.0 38.97436547653143\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (2, (1, 1)) 0.03081899040173994 78.54197477732762\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (3, (0, 0)) 0.0 -6.9316505956901295\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (3, (0, 1)) 0.016965244781319 33.94038456240796\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (3, (1, 0)) 0.0 41.67396769570462\n",
      "Next transition\n",
      "(3, (0, 1)) 1 (3, (1, 1)) 0.016368088552014333 82.40167216788326\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (0, (0, 0)) 0.0 -6.5798319957574645\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (0, (0, 1)) 0.010149672689396518 32.71217007078672\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (0, (1, 0)) 0.0 40.60304549562528\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (0, (1, 1)) 0.018295087327445347 79.87471599705444\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (1, (0, 0)) 0.0 -6.3313696666371415\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (1, (0, 1)) 0.007625601785364105 33.10072762942139\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (1, (1, 0)) 0.0 41.19307981518813\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (1, (1, 1)) 0.021767269414002685 80.47054335311412\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (2, (0, 0)) 0.0 -1.0657637128438635\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (2, (0, 1)) 0.03649762818998942 38.828185255297036\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (2, (1, 0)) 0.0 46.53107303473101\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (2, (1, 1)) 0.8635023718100105 86.41306227915051\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (3, (0, 0)) 0.0 -2.131527425687727\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (3, (0, 1)) 0.016965244781319 38.45538517373217\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (3, (1, 0)) 0.0 46.59446450345214\n",
      "Next transition\n",
      "(3, (0, 1)) 2 (3, (1, 1)) 0.016368088552014333 87.10353837588713\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (0, (0, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (0, (0, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (0, (1, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (0, (1, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (1, (0, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (1, (0, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (1, (1, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (1, (1, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (2, (0, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (2, (0, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (2, (1, 0)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (2, (1, 1)) 0 None\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (3, (0, 0)) 0 -0.0\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (3, (0, 1)) 0.50895734343957 40.6151051480371\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (3, (1, 0)) 0 48.604071967196\n",
      "Next transition\n",
      "(3, (0, 1)) 3 (3, (1, 1)) 0.49104265656043 89.30259563846887\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (0, (0, 0)) 0.0 -4.299734522156521\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (0, (0, 1)) 0.0 34.88401833225865\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (0, (1, 0)) 0.36406312645323713 43.00231737350519\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (0, (1, 1)) 0.5359368735467629 82.2050453904365\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (1, (0, 0)) 0.0 -14.007000956269238\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (1, (0, 1)) 0.0 25.295451091762278\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (1, (1, 0)) 0.025754117947212496 33.47829466472152\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (1, (1, 1)) 0.003638753252154293 72.85388962649287\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (2, (0, 0)) 0.0 -9.813802805070122\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (2, (0, 1)) 0.0 29.971598425128413\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (2, (1, 0)) 0.0268867646681112 37.970888195318196\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (2, (1, 1)) 0.005234851053019345 77.87017856649202\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (3, (0, 0)) 0.0 -8.599469044313041\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (3, (0, 1)) 0.0 32.10552131884352\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (3, (1, 0)) 0.006317350385286458 39.95756720281483\n",
      "Next transition\n",
      "(3, (1, 0)) 0 (3, (1, 1)) 0.027015982948046875 80.69558736774117\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (0, (0, 0)) 0.0 -13.173091731957781\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (0, (0, 1)) 0.0 26.233530779265955\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (0, (1, 0)) 0.011506320292159427 34.08648595330797\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (0, (1, 1)) 0.01693843972468244 73.67325918637275\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (1, (0, 0)) 0.0 -3.4658252978450648\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (1, (0, 1)) 0.0 35.89485164680878\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (1, (1, 0)) 0.7885825782474285 43.97759128831372\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (1, (1, 1)) 0.11141742175257156 83.3097490429161\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (2, (0, 0)) 0.0 -8.731431251638343\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (2, (0, 1)) 0.0 31.141697885962493\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (2, (1, 0)) 0.0268867646681112 39.321232222336164\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (2, (1, 1)) 0.005234851053019345 79.07084245977201\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (3, (0, 0)) 0.0 -6.9316505956901295\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (3, (0, 1)) 0.0 33.71387810247028\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (3, (1, 0)) 0.006317350385286458 41.65603979964613\n",
      "Next transition\n",
      "(3, (1, 0)) 1 (3, (1, 1)) 0.027015982948046875 82.46031020286293\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (0, (0, 0)) 0.0 -6.5798319957574645\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (0, (0, 1)) 0.0 32.66103746671004\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (0, (1, 0)) 0.011506320292159427 40.654393062908326\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (0, (1, 1)) 0.01693843972468244 79.87138250701179\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (1, (0, 0)) 0.0 -6.3313696666371415\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (1, (0, 1)) 0.0 33.05157537940551\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (1, (1, 0)) 0.025754117947212496 41.14217733367252\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (1, (1, 1)) 0.003638753252154293 80.5211032900145\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (2, (0, 0)) 0.0 -1.0657637128438635\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (2, (0, 1)) 0.0 38.778585911487006\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (2, (1, 0)) 0.7533272426698594 46.92516929394739\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (2, (1, 1)) 0.14667275733014065 86.52346575779337\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (3, (0, 0)) 0.0 -2.131527425687727\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (3, (0, 1)) 0.0 38.57091728866404\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (3, (1, 0)) 0.006317350385286458 46.47921190557364\n",
      "Next transition\n",
      "(3, (1, 0)) 2 (3, (1, 1)) 0.027015982948046875 87.13885145079603\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (0, (0, 0)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (0, (0, 1)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (0, (1, 0)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (0, (1, 1)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (1, (0, 0)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (1, (0, 1)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (1, (1, 0)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (1, (1, 1)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (2, (0, 0)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (2, (0, 1)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (2, (1, 0)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (2, (1, 1)) 0 None\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (3, (0, 0)) 0.0 -0.0\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (3, (0, 1)) 0.0 40.79144268034116\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (3, (1, 0)) 0.18952051155859373 48.76444814081046\n",
      "Next transition\n",
      "(3, (1, 0)) 3 (3, (1, 1)) 0.8104794884414063 89.2552761418054\n"
     ]
    }
   ],
   "source": [
    "# Defining Transition Probabilities and Rewards\n",
    "P = dict()  # Dictionary to store transition probabilities\n",
    "R = dict()  # Dictionary to store rewards\n",
    "\n",
    "actions = range(no_shops)  # Possible actions (shops)\n",
    "\n",
    "# Loop through all combinations of current state, action, and next state\n",
    "for current_state, action, next_state in list(itertools.product(state_space, actions, state_space)):\n",
    "    # If all items are already bought, set probability to 0 and reward to None\n",
    "    if current_state[1] == tuple(np.ones(no_items)):\n",
    "        P[(current_state, action, next_state)] = 0\n",
    "        R[(current_state, action, next_state)] = None\n",
    "        continue\n",
    "    \n",
    "    # Handling transitions based on the selected action (shop)\n",
    "    if action == current_state[0]:  # If action (shop) is the current shop\n",
    "        if next_state[0] != current_state[0]:\n",
    "            # If trying to move to a different shop, set probability to 0 and reward to None\n",
    "            P[(current_state, action, next_state)] = 0\n",
    "            R[(current_state, action, next_state)] = None\n",
    "        else:\n",
    "            # Calculate probability, reward, and penalties for staying in the same shop\n",
    "            P[(current_state, action, next_state)] = availability_in_shop(current_state, next_state)\n",
    "            bought_items = sum(next_state[1])\n",
    "            if bought_items > 0:\n",
    "                R[(current_state, action, next_state)] = bought_items * reward_buying + distance_penalty(distance_matrix[current_state[0]][next_state[0]]) + price_penalty(next_state)\n",
    "            else:\n",
    "                R[(current_state, action, next_state)] = distance_penalty(distance_matrix[current_state[0]][next_state[0]])\n",
    "    else:\n",
    "        if next_state[0] == action:\n",
    "            # If transitioning to the selected shop, calculate probability, reward, and penalties\n",
    "            P[(current_state, action, next_state)] = 0.9 * availability_in_shop(current_state, next_state)\n",
    "            bought_items = sum(next_state[1])\n",
    "            if bought_items > 0:\n",
    "                R[(current_state, action, next_state)] = bought_items * reward_buying + distance_penalty(distance_matrix[current_state[0]][next_state[0]]) + price_penalty(next_state)\n",
    "            else:\n",
    "                R[(current_state, action, next_state)] = distance_penalty(distance_matrix[current_state[0]][next_state[0]])\n",
    "        else:\n",
    "            # If transitioning to a different shop, calculate probability, reward, and penalties\n",
    "            P[(current_state, action, next_state)] = 0.1 * availability_in_shop(current_state, next_state) * M(next_state[0], current_state[0])\n",
    "            bought_items = sum(next_state[1])\n",
    "            if bought_items > 0:\n",
    "                R[(current_state, action, next_state)] = bought_items * reward_buying + distance_penalty(distance_matrix[current_state[0]][action] + distance_matrix[action][next_state[0]]) + price_penalty(next_state)\n",
    "            else:\n",
    "                R[(current_state, action, next_state)] = distance_penalty(distance_matrix[current_state[0]][action] + distance_matrix[action][next_state[0]])\n",
    "    \n",
    "    # Print information about the current transition\n",
    "    print(\"Next transition\")\n",
    "    print(current_state, action, next_state, P[(current_state, action, next_state)], R[(current_state, action, next_state)])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5ba112aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "def takeaction(current_state,action):\n",
    "    global P\n",
    "    global R\n",
    "    global state_space\n",
    "    r = random.random()\n",
    "    for next_state in state_space:\n",
    "        if(r<=0):\n",
    "            break\n",
    "        r-=P[(current_state,action,next_state)]\n",
    "    return next_state, R[(current_state,action,next_state)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c5ef110c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def e_greedy(e,Q_s):\n",
    "    x=random.randrange(1,11)\n",
    "    if x<=e*10:\n",
    "        return random.randrange(no_shops)\n",
    "    else:\n",
    "        return np.argmax(Q_s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b41f7bff",
   "metadata": {},
   "outputs": [],
   "source": [
    "def q_learning(no_episodes, no_steps, alpha, discount, epsilon):\n",
    "    \"\"\"\n",
    "    Implement the Q-learning algorithm for a grocery shopping scenario.\n",
    "\n",
    "    Parameters:\n",
    "    - no_episodes (int): Number of episodes or iterations of the algorithm.\n",
    "    - no_steps (int): Maximum number of steps to be taken in each episode.\n",
    "    - alpha (float): Learning rate or step size for updating Q-values.\n",
    "    - discount (float): Discount factor for future rewards in Q-value updates.\n",
    "    - epsilon (float): Exploration-exploitation trade-off parameter for the epsilon-greedy strategy.\n",
    "\n",
    "    Returns:\n",
    "    - Q (dict): Dictionary containing Q-values for state-action pairs.\n",
    "    - Rewards (list): List containing the total rewards obtained in each episode.\n",
    "\n",
    "    \"\"\"\n",
    "    Q = dict()  # Dictionary to store Q-values\n",
    "    Rewards = []  # List to store total rewards obtained in each episode\n",
    "    \n",
    "    # Loop through episodes\n",
    "    for e in range(no_episodes):\n",
    "        S = random.choice(state_space)  # Randomly choose an initial state\n",
    "        step = 0  # Initialize step count\n",
    "        Episode_Reward = 0  # Initialize total reward for the episode\n",
    "        \n",
    "        # Execute steps within the episode\n",
    "        while step < no_steps:\n",
    "            # Initialize Q-values for the current state if not already present\n",
    "            if S not in Q.keys():\n",
    "                Q[S] = np.zeros(no_shops).astype(int)\n",
    "            \n",
    "            # Check if all items are already bought, if so, end the episode\n",
    "            if S[1] == tuple(np.ones(no_items)):\n",
    "                break\n",
    "            \n",
    "            # Choose an action using epsilon-greedy strategy\n",
    "            A = e_greedy(epsilon, Q[S])\n",
    "            \n",
    "            # Take the chosen action and observe the next state and reward\n",
    "            S_, r = take_action(S, A)\n",
    "            \n",
    "            # Initialize Q-values for the next state if not already present\n",
    "            if S_ not in Q.keys():\n",
    "                Q[S_] = np.zeros(no_shops).astype(int)\n",
    "            \n",
    "            # Choose the best action for the next state\n",
    "            A_ = np.argmax(Q[S_])\n",
    "            \n",
    "            # If the reward is None, set it to 0\n",
    "            if r is None:\n",
    "                r = 0\n",
    "            \n",
    "            # Update Q-value for the current state-action pair\n",
    "            Q[S][A] = Q[S][A] + alpha * (r + discount * Q[S_][A_] - Q[S][A])\n",
    "            \n",
    "            # Update the current state for the next iteration\n",
    "            S = S_\n",
    "            \n",
    "            # Increment step count\n",
    "            step += 1\n",
    "            \n",
    "            # Accumulate the reward for the episode\n",
    "            Episode_Reward += r\n",
    "        \n",
    "        # Append the total reward for the episode to the Rewards list\n",
    "        Rewards.append(Episode_Reward)   \n",
    "    \n",
    "    return Q, Rewards\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e771747d",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_Q,Rewards=q_learning(1000,200,0.1,0.9,0.5) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0d39fcad",
   "metadata": {},
   "outputs": [],
   "source": [
    "def take_action(current_state, action):\n",
    "    \"\"\"\n",
    "    Simulate taking an action in the environment.\n",
    "\n",
    "    Parameters:\n",
    "    - current_state (tuple): Current state of the system.\n",
    "    - action (int): Chosen action.\n",
    "\n",
    "    Returns:\n",
    "    - tuple: Next state and reward.\n",
    "\n",
    "    \"\"\"\n",
    "    # Simulate the effect of taking the action on the environment\n",
    "    # Modify this part based on your specific environment dynamics\n",
    "    next_state = (current_state[0], tuple(np.random.choice([0, 1], size=no_items)))  # Example: Randomly change item availability\n",
    "    reward = np.random.normal(0, 1)  # Example: Random reward\n",
    "\n",
    "    return next_state, reward\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3f0c2382",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Policy for each state\n",
      "\n",
      "State (2, (1, 0)) Best Action 0\n",
      "State (2, (0, 0)) Best Action 0\n",
      "State (2, (0, 1)) Best Action 0\n",
      "State (2, (1, 1)) Best Action End\n",
      "State (0, (0, 1)) Best Action 0\n",
      "State (0, (1, 0)) Best Action 0\n",
      "State (0, (0, 0)) Best Action 0\n",
      "State (0, (1, 1)) Best Action End\n",
      "State (1, (0, 1)) Best Action 0\n",
      "State (1, (1, 1)) Best Action End\n",
      "State (1, (1, 0)) Best Action 0\n",
      "State (1, (0, 0)) Best Action 0\n",
      "State (3, (1, 1)) Best Action End\n",
      "State (3, (0, 0)) Best Action 0\n",
      "State (3, (0, 1)) Best Action 0\n",
      "State (3, (1, 0)) Best Action 0\n",
      "\n",
      "Rewards\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Printing the Best Policy for each state\n",
    "print(\"Best Policy for each state\")\n",
    "print(\"\")\n",
    "best_policy = dict()\n",
    "\n",
    "# Iterate over states in the Q-values result\n",
    "for state in result_Q:\n",
    "    best_action = np.argmax(result_Q[state])\n",
    "    status = state[1]\n",
    "    \n",
    "    # If all items are bought, set the best action to \"End\"\n",
    "    if status == tuple(np.ones(no_items)):\n",
    "        best_action = \"End\"\n",
    "    \n",
    "    # Store the best action in the best_policy dictionary\n",
    "    best_policy[state] = best_action\n",
    "    \n",
    "    # Print the state and its best action\n",
    "    print(\"State\", state, \"Best Action\", best_action)\n",
    "\n",
    "# Plotting Rewards\n",
    "print(\"\")\n",
    "print(\"Rewards\")\n",
    "plt.plot(Rewards)\n",
    "plt.xlabel('No. of episodes')\n",
    "plt.ylabel('Reward in that Episode')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c3069e3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test no. 0\n",
      "Test no. 1\n",
      "Test no. 2\n",
      "Test no. 3\n",
      "Test no. 4\n",
      "Test no. 5\n",
      "Test no. 6\n",
      "Test no. 7\n",
      "Test no. 8\n",
      "Test no. 9\n",
      "Test no. 10\n",
      "Test no. 11\n",
      "Test no. 12\n",
      "Test no. 13\n",
      "Test no. 14\n",
      "Test no. 15\n",
      "Test no. 16\n",
      "Test no. 17\n",
      "Test no. 18\n",
      "Test no. 19\n",
      "Test no. 20\n",
      "Test no. 21\n",
      "Test no. 22\n",
      "Test no. 23\n",
      "Test no. 24\n",
      "Test no. 25\n",
      "Test no. 26\n",
      "Test no. 27\n",
      "Test no. 28\n",
      "Test no. 29\n",
      "Test no. 30\n",
      "Test no. 31\n",
      "Test no. 32\n",
      "Test no. 33\n",
      "Test no. 34\n",
      "Test no. 35\n",
      "Test no. 36\n",
      "Test no. 37\n",
      "Test no. 38\n",
      "Test no. 39\n",
      "Test no. 40\n",
      "Test no. 41\n",
      "Test no. 42\n",
      "Test no. 43\n",
      "Test no. 44\n",
      "Test no. 45\n",
      "Test no. 46\n",
      "Test no. 47\n",
      "Test no. 48\n",
      "Test no. 49\n",
      "Test no. 50\n",
      "Test no. 51\n",
      "Test no. 52\n",
      "Test no. 53\n",
      "Test no. 54\n",
      "Test no. 55\n",
      "Test no. 56\n",
      "Test no. 57\n",
      "Test no. 58\n",
      "Test no. 59\n",
      "Test no. 60\n",
      "Test no. 61\n",
      "Test no. 62\n",
      "Test no. 63\n",
      "Test no. 64\n",
      "Test no. 65\n",
      "Test no. 66\n",
      "Test no. 67\n",
      "Test no. 68\n",
      "Test no. 69\n",
      "Test no. 70\n",
      "Test no. 71\n",
      "Test no. 72\n",
      "Test no. 73\n",
      "Test no. 74\n",
      "Test no. 75\n",
      "Test no. 76\n",
      "Test no. 77\n",
      "Test no. 78\n",
      "Test no. 79\n",
      "Test no. 80\n",
      "Test no. 81\n",
      "Test no. 82\n",
      "Test no. 83\n",
      "Test no. 84\n",
      "Test no. 85\n",
      "Test no. 86\n",
      "Test no. 87\n",
      "Test no. 88\n",
      "Test no. 89\n",
      "Test no. 90\n",
      "Test no. 91\n",
      "Test no. 92\n",
      "Test no. 93\n",
      "Test no. 94\n",
      "Test no. 95\n",
      "Test no. 96\n",
      "Test no. 97\n",
      "Test no. 98\n",
      "Test no. 99\n",
      "\n",
      "Rewards \n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Initialize lists to store rewards for Q-learning policy and random policy\n",
    "Rewards_Qpolicy = []\n",
    "Rewards_RandomPolicy = []\n",
    "\n",
    "# Run tests for 100 iterations\n",
    "for test_no in range(100):\n",
    "    print(\"Test no.\", test_no)\n",
    "    \n",
    "    # Initialize states for Q-learning policy and random policy\n",
    "    S = random.choice(state_space)\n",
    "    S_random = S\n",
    "    \n",
    "    # Initialize variables to track rewards and steps\n",
    "    r = 0\n",
    "    r_random = 0\n",
    "    step = 0\n",
    "    \n",
    "    # Run test for Q-learning policy\n",
    "    while S[1] != tuple(np.ones(no_items)) and step < 200:\n",
    "        A = best_policy[S]  # Choose action using the learned Q-learning policy\n",
    "        S_, rew = take_action(S, A)  # Take action and observe next state and reward\n",
    "        S = S_\n",
    "        rew = R[(S, A, S_)]\n",
    "        \n",
    "        if rew is None:\n",
    "            break\n",
    "        \n",
    "        r += rew\n",
    "        step += 1\n",
    "    \n",
    "    Rewards_Qpolicy.append(r)  # Store the total reward for the Q-learning policy\n",
    "    \n",
    "    # Reset variables for the random policy\n",
    "    step = 0\n",
    "    \n",
    "    # Run test for random policy\n",
    "    while S_random[1] != tuple(np.ones(no_items)) and step < 200:\n",
    "        A_random = random.choice(actions)  # Choose a random action\n",
    "        S_random_, rew = take_action(S_random, A_random)  # Take action and observe next state and reward\n",
    "        S_random = S_random_\n",
    "        rew = R[(S_random, A_random, S_random_)]\n",
    "        \n",
    "        if rew is None:\n",
    "            break\n",
    "        \n",
    "        r_random += rew\n",
    "        step += 1\n",
    "    \n",
    "    Rewards_RandomPolicy.append(r_random)  # Store the total reward for the random policy\n",
    "\n",
    "# Plotting rewards for Q-learning policy and random policy\n",
    "print(\"\")\n",
    "print(\"Rewards \")\n",
    "plt.plot(Rewards_Qpolicy, color='r', label='With Q learning Policy')\n",
    "plt.plot(Rewards_RandomPolicy, color='g', label='With Random Policy')\n",
    "plt.xlabel('Test No.')\n",
    "plt.ylabel('Rewards')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e11b1be8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
